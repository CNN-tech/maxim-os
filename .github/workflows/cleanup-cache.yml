# .github/workflows/cleanup-cache.yml
name: Cleanup Old Cache Files

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Runs every Sunday at 06:00 UTC
    - cron: '0 6 * * 0'

permissions:
  contents: write # Needed to commit changes back to the repo

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Cache Directory Path
        id: set_path
        # IMPORTANT: Adjust this path to where your cache files are stored
        # Example: cache/rpms, build-cache, etc.
        run: echo "cache_dir=./cache" >> $GITHUB_OUTPUT

      - name: Find and Delete Old Cache Files
        id: find_delete
        run: |
          CACHE_DIR="${{ steps.set_path.outputs.cache_dir }}"
          echo "Looking for files older than 7 days in: $CACHE_DIR"
          if [ -d "$CACHE_DIR" ]; then
            # Find files modified more than 6 days ago (effectively 7 days or older)
            # Use -mtime for modification time, which is often more reliable in CI
            # Use -print -delete to show what's being deleted (optional, remove -print if noisy)
            find "$CACHE_DIR" -type f -mtime +6 -print -delete
            echo "Deletion process completed."
          else
            echo "Cache directory '$CACHE_DIR' not found. Skipping cleanup."
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for Changes
        id: check_changes
        run: |
          # Check if git status reports any changes
          if git status --porcelain | grep .; then
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Changes
        if: steps.check_changes.outputs.changes_exist == 'true'
        run: |
          CACHE_DIR="${{ steps.set_path.outputs.cache_dir }}"
          # Add all changes within the cache directory (or specific files if needed)
          # Using git add . might be too broad if other changes happen concurrently.
          # Adding the specific cache dir is safer.
          git add "${CACHE_DIR}" || echo "Nothing to add in ${CACHE_DIR}, proceeding..."
          # Check again if adding the directory actually staged anything
          if git status --porcelain | grep .; then
            git commit -m "chore: Clean up cache files older than 7 days"
            git push
            echo "Committed and pushed cache cleanup changes."
          else
            echo "No effective changes found after git add. Nothing to commit."
          fi
        # Add error handling for push if needed, e.g., retries or specific branch logic

      - name: No Changes Detected
        if: steps.check_changes.outputs.changes_exist == 'false'
        run: echo "No old cache files were deleted, or no changes detected after potential deletion. Nothing to commit."
